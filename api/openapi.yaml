openapi: 3.0.2
info:
  contact:
    email: info@manticoresearch.com
    name: Manticore Software Ltd.
    url: https://manticoresearch.com/contact-us/
  description: |
    Low-level client for Manticore Search.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Manticore Search Client
  version: 1.0.0
externalDocs:
  description: Find out more about Manticore Search
  url: https://manticoresearch.com/
servers:
- description: Default Manticore Search HTTP
  url: http://127.0.0.1:9308/
tags:
- description: Operations regarding adding, updating or deleting documents
  name: Index
- description: Operations about performing searches over indexes
  name: Search
- description: Various operations
  name: Utils
paths:
  /json/search:
    post:
      description: |2

        Expects an object with mandatory properties:
        * the index name
        * the match query object
        Example :

          ```
          {'index':'movies','query':{'bool':{'must':[{'query_string':' movie'}]}},'script_fields':{'myexpr':{'script':{'inline':'IF(rating>8,1,0)'}}},'sort':[{'myexpr':'desc'},{'_score':'desc'}],'profile':true}
          ```

        It responds with an object with:
        - time of execution
        - if the query timed out
        - an array with hits (matched documents)
        - additional, if profiling is enabled, an array with profiling information is attached


          ```
          {'took':10,'timed_out':false,'hits':{'total':2,'hits':[{'_id':'1','_score':1,'_source':{'gid':11}},{'_id':'2','_score':1,'_source':{'gid':12}}]}}
          ```

        For more information about the match query syntax, additional paramaters that can be set to the input and response, please check: https://docs.manticoresearch.com/latest/html/http_reference/json_search.html.
      externalDocs:
        url: https://docs.manticoresearch.com/latest/html/http_reference/json_search.html
      operationId: search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResponse'
          description: Ok
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Performs a search
      tags:
      - Search
  /json/insert:
    post:
      description: "Insert a document. \nExpects an object like:\n \n  ```\n  {'index':'movies','id':701,'doc':{'title':'This\
        \ is an old movie','plot':'A secret team goes to North Pole','year':1950,'rating':9.5,'lat':60.4,'lon':51.99,'advise':'PG-13','meta':'{\"\
        keywords\":{\"travel\",\"ice\"},\"genre\":{\"adventure\"}}','language':[2,3]}}\n\
        \  ```\n \nThe document id can also be missing, in which case an autogenerated\
        \ one will be used:\n         \n  ```\n  {'index':'movies','doc':{'title':'This\
        \ is a new movie','plot':'A secret team goes to North Pole','year':2020,'rating':9.5,'lat':60.4,'lon':51.99,'advise':'PG-13','meta':'{\"\
        keywords\":{\"travel\",\"ice\"},\"genre\":{\"adventure\"}}','language':[2,3]}}\n\
        \  ```\n \nIt responds with an object in format:\n  \n  ```\n  {'_index':'products','_id':701,'created':true,'result':'created','status':201}\n\
        \  ```\n"
      externalDocs:
        url: https://docs.manticoresearch.com/latest/html/http_reference/json_insert.html
      operationId: insert
      requestBody:
        content:
          application/json:
            example:
              index: test
              id: 1
              doc:
                title: sample title
                gid: 10
            schema:
              $ref: '#/components/schemas/insertDocumentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Create a new document in an index
      tags:
      - Index
  /json/replace:
    post:
      description: |
        Replace an existing document. Input has same format as `insert` operation. <br/>
        Responds with an object in format: <br/>

          ```
          {'_index':'products','_id':1,'created':false,'result':'updated','status':200}
          ```
      externalDocs:
        url: https://docs.manticoresearch.com/latest/html/http_reference/json_insert.html
      operationId: replace
      requestBody:
        content:
          application/json:
            example:
              index: test
              id: 1
              doc:
                title: updated title
                gid: 15
            schema:
              $ref: '#/components/schemas/insertDocumentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Replace new document in an index
      tags:
      - Index
  /json/update:
    post:
      description: "Update one or several documents.\nThe update can be made by passing\
        \ the id or by using a match query in case multiple documents can be updated.\
        \  For example update a document using document id:\n\n  ```\n  {'index':'movies','doc':{'rating':9.49},'id':100}\n\
        \  ```\n\nAnd update by using a match query:\n\n  ```\n  {'index':'movies','doc':{'rating':9.49},'query':{'bool':{'must':[{'query_string':'new\
        \ movie'}]}}}\n  ``` \n\nThe match query has same syntax as for searching.\n\
        Responds with an object that tells how many documents where updated in format:\
        \ \n\n  ```\n  {'_index':'products','updated':1}\n  ```\n"
      externalDocs:
        url: https://docs.manticoresearch.com/latest/html/http_reference/json_update.html
      operationId: update
      requestBody:
        content:
          application/json:
            example:
              index: test
              doc:
                gid: 20
              query:
                equals:
                  cat_id: 2
            schema:
              $ref: '#/components/schemas/updateDocumentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateResponse'
          description: item updated
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Update a document in an index
      tags:
      - Index
  /json/delete:
    post:
      description: "Delete one or several documents.\nThe method has 2 ways of deleting:\
        \ either by id, in case only one document is deleted or by using a  match\
        \ query, in which case multiple documents can be delete .\nExample of input\
        \ to delete by id:\n\n  ```\n  {'index':'movies','id':100}\n  ```\n\nExample\
        \ of input to delete using a query:\n\n  ```\n  {'index':'movies','query':{'bool':{'must':[{'query_string':'new\
        \ movie'}]}}}\n  ```\n\nThe match query has same syntax as in for searching.\n\
        Responds with an object telling how many documents got deleted: \n\n  ```\n\
        \  {'_index':'products','updated':1}\n  ```\n"
      externalDocs:
        url: https://docs.manticoresearch.com/latest/html/http_reference/json_update.html
      operationId: delete
      requestBody:
        content:
          application/json:
            example:
              index: test
              query:
                match:
                  title: apple
            schema:
              $ref: '#/components/schemas/deleteDocumentRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteResponse'
          description: item updated
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Delete a document in an index
      tags:
      - Index
  /json/bulk:
    post:
      description: "Sends multiple operatons like inserts, updates, replaces or deletes.\
        \ \nFor each operation it's object must have same format as in their dedicated\
        \ method. \nThe method expects a raw string as the batch in NDJSON.\n Each\
        \ operation object needs to be serialized to \n JSON and separated by endline\
        \ (\\n). \n \n  An example of raw input:\n  \n  ```\n  {\"insert\": {\"index\"\
        : \"movies\", \"doc\": {\"plot\": \"A secret team goes to North Pole\", \"\
        rating\": 9.5, \"language\": [2, 3], \"title\": \"This is an older movie\"\
        , \"lon\": 51.99, \"meta\": {\"keywords\":[\"travel\",\"ice\"],\"genre\":[\"\
        adventure\"]}, \"year\": 1950, \"lat\": 60.4, \"advise\": \"PG-13\"}}}\n \
        \ \\n\n  {\"delete\": {\"index\": \"movies\",\"id\":700}}\n  ```\n  \n  Responds\
        \ with an object telling whenever any errors occured and an array with status\
        \ for each operation:\n  \n  ```\n  {'items':[{'update':{'_index':'products','_id':1,'result':'updated'}},{'update':{'_index':'products','_id':2,'result':'updated'}}],'errors':false}\n\
        \  ```\n \n"
      externalDocs:
        url: https://docs.manticoresearch.com/latest/html/http_reference/json_update.html
      operationId: bulk
      requestBody:
        content:
          application/x-ndjson:
            schema:
              type: string
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/bulkResponse'
          description: item updated
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Bulk index operations
      tags:
      - Index
  /json/pq/{index}/search:
    post:
      description: "Performs a percolate search. \nThis method must be used only on\
        \ percolate indexes.\n\nExpects two parameters: the index name and an object\
        \ with array of documents to be tested.\nAn example of the documents object:\n\
        \n  ```\n  {\"query\":{\"percolate\":{\"document\":{\"content\":\"sample content\"\
        }}}}\n  ```\n\nResponds with an object with matched stored queries: \n\n \
        \ ```\n  {'timed_out':false,'hits':{'total':2,'max_score':1,'hits':[{'_index':'idx_pq_1','_type':'doc','_id':'2','_score':'1','_source':{'query':{'match':{'title':'some'},}}},{'_index':'idx_pq_1','_type':'doc','_id':'5','_score':'1','_source':{'query':{'ql':'some\
        \ | none'}}}]}}\n  ```\n"
      externalDocs:
        url: https://docs.manticoresearch.com/latest/html/http_reference/json_update.html
      operationId: percolate
      parameters:
      - description: Name of the percolate index
        explode: false
        in: path
        name: index
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            example:
              query:
                percolate:
                  document:
                    title: some text to match
            schema:
              $ref: '#/components/schemas/percolateRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResponse'
          description: items found
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Perform reverse search on a percolate index
      tags:
      - Search
  /sql:
    post:
      description: |
        Run a query in SQL format.
        Expects a query parameters string that can be in two modes:
        * Select only query as `query=SELECT * FROM myindex`. The query string MUST be URL encoded
        * any type of query in format `mode=raw&query=SHOW TABLES`. The string must be as is (no URL encoding) and `mode` must be first.
        The response object depends on the query executed. In select mode the response has same format as `/search` operation.
      externalDocs:
        url: https://docs.manticoresearch.com/latest/html/httpapi_reference.html#sql-api
      operationId: sql
      requestBody:
        content:
          text/plain:
            example:
            - mode=raw&query=SHOW TABLES
            schema:
              type: string
        description: |
          Expects is a query parameters string that can be in two modes:

            * Select only query as `query=SELECT * FROM myindex`. The query string
          MUST be URL encoded

            * any type of query in format `mode=raw&query=SHOW TABLES`. The string
          must be as is (no URL encoding) and `mode` must be first.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sqlResponse'
          description: |
            In case of SELECT-only in mode none the response schema is the same as of `search`.
            In case of `mode=raw` the response depends on the query executed.
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
          description: error
      summary: Perform SQL requests
      tags:
      - utils
components:
  schemas:
    searchRequest:
      description: Payload for search operation
      example:
        index: test
        query: query_string:"find me"
      properties:
        index:
          example: test
          type: string
        query:
          additionalProperties: true
          type: object
        limit:
          type: integer
        offset:
          type: integer
        max_matches:
          type: integer
        sort:
          items:
            type: object
          type: array
        aggs:
          additionalProperties: true
          type: object
        expressions:
          type: object
        highlight:
          type: object
        _source:
          items:
            type: string
          type: array
        profile:
          type: boolean
      required:
      - index
      - query
      type: object
    updateDocumentRequest:
      description: Payload for update document
      example:
        index: test
        doc:
          price: 1000
        query:
          match:
            '*': apple
      properties:
        index:
          type: string
        doc:
          additionalProperties: true
          description: Index name
          example:
            gid: 10
          type: object
        id:
          description: Document ID
          format: int64
          type: integer
        query:
          additionalProperties: true
          description: Query tree object
          example:
            query:
              match:
                title: match me
          type: object
      required:
      - doc
      - index
      type: object
    deleteDocumentRequest:
      description: |
        Payload for delete request.
        Documents can be deleted either one by one by specifying the document id or by providing a query object.
        For more information see  [Delete API](https://docs.manticoresearch.com/latest/html/http_reference/json_delete.html)
      example:
        index: test
        id: 1
      properties:
        index:
          description: Index name
          type: string
        cluster:
          description: cluster name
          type: string
        id:
          description: Document ID
          format: int64
          type: integer
        query:
          description: Query tree object
          type: object
      required:
      - index
      type: object
    insertDocumentRequest:
      description: |
        Object with document data.
      example:
        index: test
        doc:
          title: This is some title
          gid: 100
      properties:
        index:
          description: Name of the index
          type: string
        cluster:
          description: cluster name
          type: string
        id:
          description: |
            Document ID.
          format: int64
          type: integer
        doc:
          additionalProperties: true
          description: |
            Object with document data
          type: object
      required:
      - doc
      - index
      type: object
    percolateRequest:
      description: Object with documents to percolate
      example:
        query:
          percolate:
            document:
              title: some text to match
      properties:
        query:
          additionalProperties: true
          example:
            percolate:
              document:
                title: some text to match
          properties:
            percolate:
              type: object
          required:
          - percolate
          type: object
      required:
      - query
      type: object
    searchResponse:
      description: Response object of a search request
      example:
        hits:
          total: 2
          hits:
          - _id: 1
            _score: 1
            _source:
              gid: 11
          - _id: 2
            _score: 1
            _source:
              gid: 20
        took: 0
        profile: '{}'
        timed_out: true
        aggregations:
          key: '{}'
      properties:
        took:
          type: integer
        timed_out:
          type: boolean
        aggregations:
          additionalProperties: true
          type: object
        hits:
          $ref: '#/components/schemas/searchResponse_hits'
        profile:
          type: object
      type: object
    sqlResponse:
      additionalProperties: true
      description: Response from sql depends on the query executed.
      example:
        total: 0
        error: null
      type: object
    successResponse:
      description: Success response
      example:
        _index: test
        _id: 1
        result: created
        created: true
      properties:
        _index:
          type: string
        _id:
          format: int64
          type: integer
        created:
          type: boolean
        result:
          type: string
        found:
          type: boolean
      type: object
    bulkResponse:
      additionalProperties: true
      description: Success bulk response
      example:
        error: true
        items: '{}'
      properties:
        items:
          type: object
        error:
          type: boolean
      type: object
    updateResponse:
      description: Success response
      example:
        _index: test
        updated: 29
      properties:
        _index:
          type: string
        updated:
          type: integer
        _id:
          format: int64
          type: integer
        result:
          type: string
      type: object
    deleteResponse:
      description: Success response
      example:
        _index: test
        deleted: 29
      properties:
        _index:
          type: string
        deleted:
          type: integer
        _id:
          format: int64
          type: integer
        result:
          type: string
      type: object
    errorResponse:
      description: Error response
      example:
        status: 500
        error: an error occured
      properties:
        error:
          additionalProperties: true
          type: object
        status:
          example: 500
          type: integer
      required:
      - error
      - status
      type: object
    searchResponse_hits:
      example:
        total: 2
        hits:
        - _id: 1
          _score: 1
          _source:
            gid: 11
        - _id: 2
          _score: 1
          _source:
            gid: 20
      properties:
        max_score:
          type: integer
        total:
          type: integer
        hits:
          items:
            type: object
          type: array
      type: object
